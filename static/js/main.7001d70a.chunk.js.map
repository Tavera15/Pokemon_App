{"version":3,"sources":["components/LoadingPage/Loading.js","components/PokemonCard.js","components/CardList/CardList.js","components/NewPokemonPage/NewPokemonPage.js","components/PokeBar.js","App.js","serviceWorker.js","index.js"],"names":["Loading","className","src","alt","PokemonCard","name","id","pokeTypes","sprite","classes","root","textAlign","background","cardImage","paddingTop","backgroundSize","Grid","item","lg","md","sm","xs","Card","variant","style","CardHeader","title","toUpperCase","subheader","avatar","Avatar","backgroundColor","CardMedia","image","Button","width","color","href","CardList","props","isLoaded","container","spacing","window","innerWidth","pokemon","map","poke","i","key","data","sprites","front_default","pokeType","types","length","type","columns","label","minWidth","NewPokemonPage","useState","setPokemon","pokemonName","useParams","React","useEffect","a","axios","get","res","console","log","getPokemonData","makeStyles","maxHeight","useStyles","page","setPage","rowsPerPage","setRowsPerPage","status","justify","padding","alignItems","display","margin","height","CardContent","Paper","TableContainer","Table","TableHead","TableRow","TableCell","align","TableBody","float","weight","base_experience","stats","stat","base_stat","stickyHeader","aria-label","column","moves","slice","row","hover","role","tabIndex","move","TablePagination","rowsPerPageOptions","component","count","onChangePage","event","newPage","onChangeRowsPerPage","target","value","PokeBar","AppBar","position","Toolbar","Tabs","centered","Tab","App","pokemonData","setPokemonData","allLoaded","setLoadStatus","allPokemonData","results","url","Promise","all","then","prev","finally","e","getAllPokemonData","path","children","exact","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.7001d70a.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Loading.css';\r\n\r\nconst Loading = () => {\r\n\treturn(\r\n\t\t<div className='loadingContainer'>\r\n\t\t\t<img className='loadingPikachu' src=\"https://media2.giphy.com/media/kuWN0iF9BLQKk/source.gif\" alt='Pikachu'/>\r\n\t\t\t<h1 className=\"loadingText\">Loading...</h1>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Loading;","import React from 'react';\r\nimport { Card, CardMedia, CardHeader, Grid, Button } from '@material-ui/core';\r\nimport Avatar from '@material-ui/core/Avatar';\r\n\r\nfunction CardStyle()\r\n{\r\n\treturn(\r\n\t\t{\r\n\t\t\troot: {\r\n\t\t\t\ttextAlign: 'center',\r\n\t\t\t\tbackground: 'linear-gradient(175deg, rgba(255,0,0,1) 24%, rgba(0,0,0,1) 25%, rgba(240,240,240,1) 26%)',\r\n\t\t\t},\r\n\r\n\t\t\tcardImage: {\r\n\t\t        paddingTop: '100%',\r\n\t\t        backgroundSize:'cover'\r\n\t      \t}\r\n\t\t}\r\n\t);\r\n}\r\n\r\nconst PokemonCard = ({name, id, pokeTypes, sprite}) => {\r\n\tconst classes = CardStyle();\r\n\treturn(\r\n\t\t<Grid item lg={2} md={4} sm={4} xs={12}>\r\n\t\t\t<Card variant=\"outlined\" style={classes.root}>\r\n\t\t\t\t<CardHeader \r\n\t\t\t\t\ttitle={name.toUpperCase()}\r\n\t\t          \tsubheader={pokeTypes}\r\n\t\t          \tavatar={<Avatar style={{backgroundColor: 'black'}}>{id}</Avatar>}\r\n\t\t\t\t/>\r\n\t\t\t\t<CardMedia\r\n\t\t\t\t\talt={name}\r\n\t\t\t\t\timage={sprite}\r\n\t\t\t\t\tstyle={classes.cardImage}\r\n\t\t\t\t/>\r\n\t\t\t\t<Button style={{width: '100%'}} variant=\"contained\" color=\"primary\" href={\"/Pokemon_App/\"+name}>\r\n\t\t\t\t  Open Page\r\n\t\t\t\t</Button>\r\n\t\t\t</Card>\r\n\t\t</Grid>\r\n\t);\r\n}\r\n\r\nexport default PokemonCard;","import React from 'react';\r\nimport { Grid } from '@material-ui/core';\r\nimport './cardList.css';\r\nimport Loading from '../LoadingPage/Loading';\r\nimport PokemonCard from '../PokemonCard'\r\n\r\nfunction CardList(props) {\r\n\treturn(\r\n\t\t<div>\r\n\t\t\t{!props.isLoaded ? <Loading />\r\n\t\t\t:\r\n\t\t\t\t<Grid container spacing={(window.innerWidth <= 700) ? 0 : 1} className=\"listContainer\">\r\n\t\t\t\t\t{props.pokemon.map((poke, i) =>\r\n\t\t\t\t\t\t<PokemonCard\r\n\t\t\t\t\t\t\tkey={i+1}\r\n\t\t\t\t\t\t\tname={poke.data.name}\r\n\t\t\t\t\t\t\tid={poke.data.id}\r\n\t\t\t\t\t\t\tsprite={poke.data.sprites.front_default}\r\n\t\t\t\t\t\t\tpokeType={(poke.data.types.length === 1) \r\n\t\t\t\t\t\t\t\t? poke.data.types[0].type.name \r\n\t\t\t\t\t\t\t\t: poke.data.types[1].type.name + \"/\" + poke.data.types[0].type.name}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</Grid>\r\n\t\t\t}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CardList;","import React, {useState} from 'react';\r\nimport './PokemonPage.css'\r\nimport axios from 'axios';\r\nimport Loading from '../LoadingPage/Loading';\r\nimport {useParams} from \"react-router-dom\";\r\nimport { Card, CardMedia, Grid, CardContent } from '@material-ui/core';\r\n\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst columns = [\r\n  { id: 'name', label: 'Pokemon Moves', minWidth: '100%', }\r\n]\r\n\r\n\r\nfunction NewPokemonPage()\r\n{\r\n    const [pokemon, setPokemon] = useState({});\r\n    const { pokemonName } = useParams();\r\n\r\n    React.useEffect(() => {\r\n        async function getPokemonData() {\r\n            const res = await axios.get(\"https://pokeapi.co/api/v2/pokemon/\" + pokemonName);\r\n            console.log(res);\r\n            setPokemon(res);\r\n        }\r\n\r\n        getPokemonData();\r\n    }, [pokemonName]);\r\n\r\n    const useStyles = makeStyles({\r\n        root: {\r\n          width: '100%',\r\n        },\r\n        container: {\r\n          maxHeight: '100%',\r\n        },\r\n      });\r\n  \r\n      const classes = useStyles();\r\n      const [page, setPage] = React.useState(0);\r\n      const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n  \r\n      const handleChangePage = (event, newPage) => {\r\n          setPage(newPage);\r\n      };\r\n  \r\n      const handleChangeRowsPerPage = event => {\r\n          setRowsPerPage(+event.target.value);\r\n          setPage(0);\r\n      };\r\n\r\n    return(\r\n        <div>\r\n            {pokemon.status !== 200 ? <Loading />\r\n                :\r\n                <div>\r\n                    <Grid item justify=\"center\" container lg={12} style={{backgroundColor: 'white', textAlign: 'center', padding: '5%' }}>\r\n\r\n                        <Grid container item alignItems=\"center\" lg={3} sm={6} xs={12} style={{display: 'block', margin: '0 auto'}}>\r\n                            <Card style={{margin: '0', height: '100%'}}>\r\n                                <h1 style={{textAlign: 'center'}}>{pokemon.data.name.toUpperCase()}</h1>\r\n\r\n                                <CardMedia \r\n                                    image={pokemon.data.sprites.front_default}\r\n                                    alt={pokemon.data.name}\r\n                                    style={{paddingTop: '100%', backgroundSize:'cover'}}\r\n                                />\r\n\r\n                                <CardContent>\r\n                                    {(pokemon.data.types.length === 1) \r\n                                        ? pokemon.data.types[0].type.name \r\n                                        : pokemon.data.types[1].type.name + \"/\" + pokemon.data.types[0].type.name}\r\n                                </CardContent>\r\n                            </Card>\r\n                        </Grid>\r\n\r\n\r\n                        <Grid container item lg={3} sm={6}>\r\n                            <Paper className={classes.root}>\r\n                                <TableContainer >\r\n                                    <Table style={{width: '100%'}}>\r\n                                        <TableHead>\r\n                                            <TableRow>\r\n                                                <TableCell style={{width: '100%'}} align=\"center\">\r\n                                                    Pokemon Data\r\n                                                </TableCell>\r\n                                            </TableRow>\r\n                                        </TableHead>\r\n                                        <TableBody>\r\n                                                <TableRow style={{width: '100%'}}>\r\n                                                    <TableCell>\r\n                                                        <h4 style={{textAlign: 'left', margin: 0}}>\r\n                                                            Pokemon ID:\r\n                                                            <span style={{float: 'right'}}>\r\n                                                                {pokemon.data.id}\r\n                                                            </span>\r\n                                                        </h4>\r\n                                                    </TableCell>\r\n                                                </TableRow>\r\n\r\n                                                <TableRow>\r\n                                                    <TableCell>\r\n                                                        <h4 style={{textAlign: 'left', margin: 0}}>\r\n                                                            Weight:\r\n                                                            <span style={{float: 'right'}}>\r\n                                                                {pokemon.data.weight}\r\n                                                            </span>\r\n                                                        </h4>\r\n                                                    </TableCell>\r\n                                                </TableRow>\r\n                                                \r\n                                                <TableRow>\r\n                                                    <TableCell>\r\n                                                        <h4 style={{textAlign: 'left', margin: 0}}>\r\n                                                            Height:\r\n                                                            <span style={{float: 'right'}}>\r\n                                                                {pokemon.data.height}\r\n                                                            </span>\r\n                                                        </h4>\r\n                                                    </TableCell>\r\n                                                </TableRow>\r\n                                                \r\n                                                <TableRow>\r\n                                                    <TableCell>\r\n                                                        <h4 style={{textAlign: 'left', margin: 0}}>\r\n                                                            Base XP:\r\n                                                            <span style={{float: 'right'}}>\r\n                                                                {pokemon.data.base_experience}\r\n                                                            </span>\r\n                                                        </h4>\t\t\t\t\t\t\r\n                                                    </TableCell>\r\n                                                </TableRow>\t\r\n                                                \r\n                                                {pokemon.data.stats.map((stat, i) => (\r\n                                                    <TableRow key={i}>\r\n                                                        <TableCell>\r\n                                                            <h4 style={{textAlign: 'left', margin: 0}}>\r\n                                                                {stat.stat.name}:\r\n                                                                <span style={{float: 'right'}}>\r\n                                                                    {stat.base_stat}\r\n                                                                </span>\r\n                                                            </h4>\t\t\t\t\t\t\r\n                                                        </TableCell>\r\n                                                    </TableRow>\t\r\n                                                ))}\r\n\r\n                                        </TableBody>\r\n                                    </Table>\r\n                                </TableContainer>\r\n                            </Paper>\r\n                        </Grid>\r\n                        \r\n                        <Grid container item lg={6} sm={12}>\r\n                            <Paper className={classes.root}>\r\n                            <TableContainer className={classes.container}>\r\n                                <Table stickyHeader aria-label=\"sticky table\">\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                    {columns.map(column => (\r\n                                        <TableCell\r\n                                        key={column.id}\r\n                                        align=\"center\"\r\n                                        style={{ minWidth: column.minWidth }}\r\n                                        >\r\n                                        {column.label}\r\n                                        </TableCell>\r\n                                    ))}\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {pokemon.data.moves.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row, i) => {\r\n                                        return (\r\n                                            <TableRow hover role=\"checkbox\" tabIndex={-1} key={i}>\r\n                                            <TableCell align=\"center\">\r\n                                                {row.move.name}\r\n                                            </TableCell>\r\n                                            </TableRow>\r\n                                        );\r\n                                    })}\r\n                                </TableBody>\r\n                                </Table>\r\n                            </TableContainer>\r\n                            <TablePagination\r\n                                    rowsPerPageOptions={[10, 25, 100]}\r\n                                    component=\"div\"\r\n                                    count={pokemon.data.moves.length}\r\n                                    rowsPerPage={rowsPerPage}\r\n                                    page={page}\r\n                                    onChangePage={handleChangePage}\r\n                                    onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                            />\r\n                            </Paper>\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\nexport default NewPokemonPage;","import React from \"react\";\r\nimport { Tabs, Tab } from '@material-ui/core';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\n\r\nfunction PokeBar() \r\n{\r\n\treturn(\r\n        <AppBar style={{ position: 'relative'}}>\r\n\t      <Toolbar>\r\n\t      \t<Tabs centered value={false}>\r\n\t      \t\t<Tab label=\"Gen I\" href=\"/Pokemon_App\"/>\r\n\t      \t</Tabs>\r\n \t      </Toolbar>\r\n\t    </AppBar>\r\n  \t)\r\n}\r\n\r\nexport default PokeBar;","import React from 'react';\r\nimport axios from 'axios';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport './App.css';\r\nimport CardList from \"./components/CardList/CardList\";\r\nimport NewPokemonPage from './components/NewPokemonPage/NewPokemonPage';\r\nimport PokeBar from './components/PokeBar';\r\n\r\nfunction App()\r\n{\r\n\tconst [pokemonData, setPokemonData] = React.useState([]);\r\n\tconst [allLoaded, setLoadStatus] = React.useState(false);\r\n\tconst limit = 151;\r\n\r\n\tReact.useEffect(() => {\r\n\t\tasync function getAllPokemonData() \r\n\t\t{\r\n\t\t\tconst res = await axios.get('https://pokeapi.co/api/v2/pokemon/?limit='+limit);\r\n\t\t\t\r\n\t\t\tconst allPokemonData = res.data.results.map(pokemon => {\r\n\t\t\t\treturn axios.get(pokemon.url)\r\n\t\t\t});\r\n\r\n\t\t\tawait Promise.all(allPokemonData)\r\n\t\t\t.then(pokemon => setPokemonData(prev => [...prev, pokemon]))\r\n\t\t\t.finally(e => setLoadStatus(true));\r\n\t\t}\r\n\r\n\t\tgetAllPokemonData();\r\n\t}, [])\r\n\r\n\t\r\n\tfunction createRoute() {\r\n\t\treturn(\r\n\t\t\t<Router>\r\n\t\t\t\t{pokemonData.map((poke, i) => \r\n\t\t\t\t\t<Route key={i} path = \"/Pokemon_App/:pokemonName\" children={<NewPokemonPage />}/>\r\n\t\t\t\t)}\r\n\t\t\t</Router>\r\n\t\t);\r\n\t}\r\n\t\r\n\t\r\n\treturn(\r\n\t\t<div>\r\n\t\t\t<PokeBar/>\r\n\t\t\t<Router>\r\n\t\t\t\t{createRoute()}\r\n\t\t\t\t<Route exact path=\"/Pokemon_App\" component={() => <CardList pokemon={pokemonData[0]} isLoaded = {allLoaded} />} />\r\n\t\t\t</Router>\t\t\r\n\t\t</div>\r\n\t);\r\n\t\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}
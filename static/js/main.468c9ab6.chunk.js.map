{"version":3,"sources":["components/LoadingPage/Loading.js","components/CardList/CardList.js","components/PokemonPage/PokemonPage.js","components/PokeBar.js","App.js","serviceWorker.js","index.js"],"names":["Loading","className","src","alt","PokemonCard","lazy","CardList","pokemon","Grid","container","spacing","window","innerWidth","fallback","map","poke","i","key","name","id","sprite","sprites","front_default","pokeType","types","length","type","columns","label","minWidth","PokemonPage","moves","pokeTypes","weight","height","baseXP","classes","makeStyles","root","width","maxHeight","useStyles","React","useState","page","setPage","rowsPerPage","setRowsPerPage","item","justify","lg","style","backgroundColor","textAlign","padding","md","sm","xs","toUpperCase","alignItems","display","margin","Card","CardMedia","image","paddingTop","backgroundSize","CardContent","Paper","TableContainer","Table","TableHead","TableRow","TableCell","align","TableBody","float","stickyHeader","aria-label","column","slice","row","hover","role","tabIndex","move","TablePagination","rowsPerPageOptions","component","count","onChangePage","event","newPage","onChangeRowsPerPage","target","value","PokeBar","AppBar","position","Toolbar","Tabs","centered","Tab","href","App","props","state","this","fetchPokemon","fetch","then","res","json","allPokemon","results","forEach","url","data","pokeData","setState","concat","exact","path","base_experience","createRoute","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oWAYeA,G,YATC,WACf,OACC,yBAAKC,UAAU,oBACd,yBAAKA,UAAU,iBAAiBC,IAAI,0DAA0DC,IAAI,YAClG,wBAAIF,UAAU,eAAd,iBCFGG,EAAcC,gBAAK,kBAAM,iCAsBhBC,EApBE,SAAC,GAAe,IAAdC,EAAa,EAAbA,QAClB,OACC,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAUC,OAAOC,YAAc,IAAO,EAAI,EAAGX,UAAU,iBACtE,kBAAC,WAAD,CAAUY,SAAU,kBAAC,EAAD,OAClBN,EAAQO,KAAI,SAACC,EAAMC,GAAP,OACZ,kBAACZ,EAAD,CACCa,IAAKD,EAAE,EACPE,KAAMH,EAAKG,KACXC,GAAIJ,EAAKI,GACTC,OAAQL,EAAKM,QAAQC,cACrBC,SAAiC,IAAtBR,EAAKS,MAAMC,OACnBV,EAAKS,MAAM,GAAGE,KAAKR,KACnBH,EAAKS,MAAM,GAAGE,KAAKR,KAAO,IAAMH,EAAKS,MAAM,GAAGE,KAAKR,a,2ICNtDS,EAAU,CACd,CAAER,GAAI,OAAQS,MAAO,gBAAiBC,SAAU,SA4JnCC,EAzJK,SAAC,GAAkE,IAAjEZ,EAAgE,EAAhEA,KAAME,EAA0D,EAA1DA,OAAQW,EAAkD,EAAlDA,MAAOC,EAA2C,EAA3CA,UAAWC,EAAgC,EAAhCA,OAAQC,EAAwB,EAAxBA,OAAQf,EAAgB,EAAhBA,GAAIgB,EAAY,EAAZA,OAWnEC,EATYC,YAAW,CAC3BC,KAAM,CACJC,MAAO,QAET9B,UAAW,CACT+B,UAAW,MAICC,GAXqE,EAY7DC,IAAMC,SAAS,GAZ8C,mBAY9EC,EAZ8E,KAYxEC,EAZwE,OAa/CH,IAAMC,SAAS,IAbgC,mBAa9EG,EAb8E,KAajEC,EAbiE,KAwBrF,OACC,kBAACvC,EAAA,EAAD,CAAMwC,MAAI,EAACC,QAAQ,SAASxC,WAAS,EAACyC,GAAI,GAAIC,MAAO,CAACC,gBAAiB,QAASC,UAAW,SAAUC,QAAS,OAC7G,kBAAC9C,EAAA,EAAD,CAAMwC,MAAI,EAACE,GAAI,GAAIK,GAAI,GAAIC,GAAI,GAAIC,GAAI,GACtC,wBAAIN,MAAO,CAACE,UAAW,WAAYnC,EAAKwC,gBAGzC,kBAAClD,EAAA,EAAD,CAAMC,WAAS,EAACuC,MAAI,EAACW,WAAW,SAAST,GAAI,EAAGM,GAAI,EAAGC,GAAI,GAAIN,MAAO,CAACS,QAAS,QAASC,OAAQ,WAChG,kBAACC,EAAA,EAAD,CAAMX,MAAO,CAACU,OAAQ,IAAK3B,OAAQ,SAElC,kBAAC6B,EAAA,EAAD,CACCC,MAAO5C,EACPjB,IAAKe,EACLiC,MAAO,CAACc,WAAY,OAAQC,eAAe,WAG5C,kBAACC,EAAA,EAAD,KACwB,IAArBnC,EAAUP,OACTO,EAAU,GAAGN,KAAKR,KAClBc,EAAU,GAAGN,KAAKR,KAAO,IAAMc,EAAU,GAAGN,KAAKR,QAKvD,kBAACV,EAAA,EAAD,CAAMC,WAAS,EAACuC,MAAI,EAACE,GAAI,EAAGM,GAAI,GAC/B,kBAACY,EAAA,EAAD,CAAOnE,UAAWmC,EAAQE,MACzB,kBAAC+B,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,CAAOnB,MAAO,CAACZ,MAAO,SACrB,kBAACgC,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,CAAWtB,MAAO,CAACZ,MAAO,QAASmC,MAAM,UAAzC,kBAKF,kBAACC,EAAA,EAAD,KACE,kBAACH,EAAA,EAAD,CAAUrB,MAAO,CAACZ,MAAO,SACxB,kBAACkC,EAAA,EAAD,KACC,wBAAItB,MAAO,CAACE,UAAW,OAAQQ,OAAQ,IAAvC,cAEI,0BAAMV,MAAO,CAACyB,MAAO,UAChBzD,MAMX,kBAACqD,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,KACC,wBAAItB,MAAO,CAACE,UAAW,OAAQQ,OAAQ,IAAvC,UAEI,0BAAMV,MAAO,CAACyB,MAAO,UAChB3C,MAMX,kBAACuC,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,KACC,wBAAItB,MAAO,CAACE,UAAW,OAAQQ,OAAQ,IAAvC,UAEI,0BAAMV,MAAO,CAACyB,MAAO,UAChB1C,MAMX,kBAACsC,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,KACC,wBAAItB,MAAO,CAACE,UAAW,OAAQQ,OAAQ,IAAvC,WAEI,0BAAMV,MAAO,CAACyB,MAAO,UAChBzC,WAWjB,kBAAC3B,EAAA,EAAD,CAAMC,WAAS,EAACuC,MAAI,EAACE,GAAI,EAAGM,GAAI,IAC/B,kBAACY,EAAA,EAAD,CAAOnE,UAAWmC,EAAQE,MACrB,kBAAC+B,EAAA,EAAD,CAAgBpE,UAAWmC,EAAQ3B,WACjC,kBAAC6D,EAAA,EAAD,CAAOO,cAAY,EAACC,aAAW,gBAC7B,kBAACP,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACG7C,EAAQb,KAAI,SAAAiE,GAAM,OACjB,kBAACN,EAAA,EAAD,CACExD,IAAK8D,EAAO5D,GACZuD,MAAM,SACNvB,MAAO,CAAEtB,SAAUkD,EAAOlD,WAEzBkD,EAAOnD,YAKhB,kBAAC+C,EAAA,EAAD,KACG5C,EAAMiD,MAAMpC,EAAOE,EAAaF,EAAOE,EAAcA,GAAahC,KAAI,SAACmE,EAAKjE,GAC3E,OACE,kBAACwD,EAAA,EAAD,CAAUU,OAAK,EAACC,KAAK,WAAWC,UAAW,EAAGnE,IAAKD,GACjD,kBAACyD,EAAA,EAAD,CAAWC,MAAM,UACfO,EAAII,KAAKnE,aAQvB,kBAACoE,EAAA,EAAD,CACGC,mBAAoB,CAAC,GAAI,GAAI,KAC7BC,UAAU,MACVC,MAAO1D,EAAMN,OACbqB,YAAaA,EACbF,KAAMA,EACN8C,aAjIc,SAACC,EAAOC,GAChC/C,EAAQ+C,IAiIEC,oBA9HqB,SAAAF,GAC/B5C,GAAgB4C,EAAMG,OAAOC,OAC7BlD,EAAQ,U,oCCrBKmD,EAZC,WACf,OACO,kBAACC,EAAA,EAAD,CAAQ9C,MAAO,CAAE+C,SAAU,aAC5B,kBAACC,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,CAAMC,UAAQ,EAACN,OAAO,GACrB,kBAACO,EAAA,EAAD,CAAK1E,MAAM,QAAQ2E,KAAK,qBC8DlBC,E,YA/Dd,WAAYC,GAAQ,IAAD,8BAClB,4CAAMA,KACDC,MAAQ,CACZnG,QAAS,IAHQ,E,iFAQlBoG,KAAKC,iB,qCAGU,IAAD,OACdC,MAAM,gDACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAACG,GACNA,EAAWC,QAAQC,SAAQ,SAACpG,GAC3B8F,MAAM9F,EAAKqG,KACVN,MAAK,SAAAO,GAAI,OAAIA,EAAKL,UAClBF,MAAK,SAACQ,GACN,EAAKC,SAAS,CACbhH,QAAS,EAAKmG,MAAMnG,QAAQiH,OAAOF,gB,oCAQvC,OACC,kBAAC,IAAD,KACEX,KAAKD,MAAMnG,QAAQO,KAAI,SAACC,EAAMC,GAAP,OACvB,kBAAC,IAAD,CAAOC,IAAKD,EAAGyG,OAAK,EAACC,KAAM,gBAAgB3G,EAAKG,KAAMsE,UAAW,kBAChE,kBAAC,EAAD,CACCtE,KAAMH,EAAKG,KACXE,OAAQL,EAAKM,QAAQC,cACrBS,MAAOhB,EAAKgB,MACZC,UAAWjB,EAAKS,MAChBS,OAAQlB,EAAKkB,OACbC,OAAQnB,EAAKmB,OACbf,GAAIJ,EAAKI,GACTgB,OAAQpB,EAAK4G,gBACb1G,IAAKD,EAAE,a,+BAQH,IAAD,OACR,OACC,6BACC,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE2F,KAAKiB,cACN,kBAAC,IAAD,CAAOH,OAAK,EAACC,KAAK,eAAelC,UAAW,kBAAM,kBAAC,EAAD,CAAUjF,QAAS,EAAKmG,MAAMnG,mB,GAzDnEsH,aCKEC,QACW,cAA7BnH,OAAOoH,SAASC,UAEe,UAA7BrH,OAAOoH,SAASC,UAEhBrH,OAAOoH,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.468c9ab6.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Loading.css';\r\n\r\nconst Loading = () => {\r\n\treturn(\r\n\t\t<div className='loadingContainer'>\r\n\t\t\t<img className='loadingPikachu' src=\"https://media2.giphy.com/media/kuWN0iF9BLQKk/source.gif\" alt='Pikachu'/>\r\n\t\t\t<h1 className=\"loadingText\">Loading...</h1>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Loading;","import React, { lazy, Suspense } from 'react';\r\nimport { Grid } from '@material-ui/core';\r\nimport './cardList.css';\r\nimport Loading from '../LoadingPage/Loading';\r\n\r\nconst PokemonCard = lazy(() => import('../PokemonCard'));\r\n\r\nconst CardList = ({pokemon}) => {\r\n\treturn(\r\n\t\t<Grid container spacing={(window.innerWidth <= 700) ? 0 : 1} className=\"listContainer\">\r\n\t\t\t<Suspense fallback={<Loading />}>\r\n\t\t\t\t{pokemon.map((poke, i) =>\r\n\t\t\t\t\t<PokemonCard\r\n\t\t\t\t\t\tkey={i+1}\r\n\t\t\t\t\t\tname={poke.name}\r\n\t\t\t\t\t\tid={poke.id}\r\n\t\t\t\t\t\tsprite={poke.sprites.front_default}\r\n\t\t\t\t\t\tpokeType={(poke.types.length === 1) \r\n\t\t\t\t\t\t\t? poke.types[0].type.name \r\n\t\t\t\t\t\t\t: poke.types[1].type.name + \"/\" + poke.types[0].type.name}\r\n\t\t\t\t\t/>\r\n\t\t\t\t)}\r\n\t\t\t</Suspense>\r\n \t\t</Grid>\r\n\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\nimport { Card, CardMedia, Grid, CardContent } from '@material-ui/core';\r\nimport './PokemonPage.css'\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst columns = [\r\n  { id: 'name', label: 'Pokemon Moves', minWidth: '100%' }\r\n]\r\n\r\nconst PokemonPage = ({name, sprite, moves, pokeTypes, weight, height, id, baseXP}) => {\r\n\r\n\tconst useStyles = makeStyles({\r\n\t  root: {\r\n\t    width: '100%',\r\n\t  },\r\n\t  container: {\r\n\t    maxHeight: 440,\r\n\t  },\r\n\t});\r\n\r\n\tconst classes = useStyles();\r\n\tconst [page, setPage] = React.useState(0);\r\n\tconst [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n\r\n\tconst handleChangePage = (event, newPage) => {\r\n\t\tsetPage(newPage);\r\n\t};\r\n\r\n\tconst handleChangeRowsPerPage = event => {\r\n\t\tsetRowsPerPage(+event.target.value);\r\n\t\tsetPage(0);\r\n\t};\r\n\r\n\treturn(\r\n\t\t<Grid item justify=\"center\" container lg={12} style={{backgroundColor: 'white', textAlign: 'center', padding: '5%' }}>\r\n\t\t\t<Grid item lg={12} md={12} sm={12} xs={6}>\r\n\t\t\t\t<h1 style={{textAlign: 'center'}}>{name.toUpperCase()}</h1>\r\n\t\t\t</Grid>\r\n\r\n\t\t\t<Grid container item alignItems=\"center\" lg={2} sm={6} xs={12} style={{display: 'block', margin: '0 auto'}}>\r\n\t\t\t\t<Card style={{margin: '0', height: '100%'}}>\r\n\r\n\t\t\t\t\t<CardMedia \r\n\t\t\t\t\t\timage={sprite}\r\n\t\t\t\t\t\talt={name}\r\n\t\t\t\t\t\tstyle={{paddingTop: '100%', backgroundSize:'cover'}}\r\n\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t<CardContent>\r\n\t\t\t\t\t\t{(pokeTypes.length === 1) \r\n\t\t\t\t\t\t\t? pokeTypes[0].type.name \r\n\t\t\t\t\t\t\t: pokeTypes[1].type.name + \"/\" + pokeTypes[0].type.name}\r\n\t\t\t\t\t</CardContent>\r\n\t\t\t\t</Card>\r\n\t\t\t</Grid>\r\n\r\n\t\t\t<Grid container item lg={3} sm={6}>\r\n\t\t\t\t<Paper className={classes.root}>\r\n\t\t\t\t\t<TableContainer >\r\n\t\t\t\t\t\t<Table style={{width: '100%'}}>\r\n\t\t\t\t\t\t\t<TableHead>\r\n\t\t\t\t\t\t\t\t<TableRow>\r\n\t\t\t\t\t\t\t\t\t<TableCell style={{width: '100%'}} align=\"center\">\r\n\t\t\t\t\t\t\t\t\t\tPokemon Data\r\n\t\t\t\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t\t</TableHead>\r\n\t\t\t\t\t\t\t<TableBody>\r\n\t\t\t\t\t\t\t\t\t<TableRow style={{width: '100%'}}>\r\n\t\t\t\t\t\t\t\t\t\t<TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t<h4 style={{textAlign: 'left', margin: 0}}>\r\n\t\t\t\t\t\t\t\t\t\t\t    Pokemon ID:\r\n\t\t\t\t\t\t\t\t\t\t\t    <span style={{float: 'right'}}>\r\n\t\t\t\t\t\t\t\t\t\t\t        {id}\r\n\t\t\t\t\t\t\t\t\t\t\t    </span>\r\n\t\t\t\t\t\t\t\t\t\t\t</h4>\r\n\t\t\t\t\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t\t\t\t</TableRow>\r\n\r\n\t\t\t\t\t\t\t\t\t<TableRow>\r\n\t\t\t\t\t\t\t\t\t\t<TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t<h4 style={{textAlign: 'left', margin: 0}}>\r\n\t\t\t\t\t\t\t\t\t\t\t    Weight:\r\n\t\t\t\t\t\t\t\t\t\t\t    <span style={{float: 'right'}}>\r\n\t\t\t\t\t\t\t\t\t\t\t        {weight}\r\n\t\t\t\t\t\t\t\t\t\t\t    </span>\r\n\t\t\t\t\t\t\t\t\t\t\t</h4>\r\n\t\t\t\t\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t<TableRow>\r\n\t\t\t\t\t\t\t\t\t\t<TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t<h4 style={{textAlign: 'left', margin: 0}}>\r\n\t\t\t\t\t\t\t\t\t\t\t    Height:\r\n\t\t\t\t\t\t\t\t\t\t\t    <span style={{float: 'right'}}>\r\n\t\t\t\t\t\t\t\t\t\t\t        {height}\r\n\t\t\t\t\t\t\t\t\t\t\t    </span>\r\n\t\t\t\t\t\t\t\t\t\t\t</h4>\r\n\t\t\t\t\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t<TableRow>\r\n\t\t\t\t\t\t\t\t\t\t<TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t<h4 style={{textAlign: 'left', margin: 0}}>\r\n\t\t\t\t\t\t\t\t\t\t\t    Base XP:\r\n\t\t\t\t\t\t\t\t\t\t\t    <span style={{float: 'right'}}>\r\n\t\t\t\t\t\t\t\t\t\t\t        {baseXP}\r\n\t\t\t\t\t\t\t\t\t\t\t    </span>\r\n\t\t\t\t\t\t\t\t\t\t\t</h4>\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t\t\t\t</TableRow>\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t</TableBody>\r\n\t\t\t\t\t\t</Table>\r\n\t\t\t\t\t</TableContainer>\r\n\t\t\t\t</Paper>\r\n\t\t\t</Grid>\r\n\r\n\t\t\t<Grid container item lg={7} sm={12}>\r\n\t\t\t\t<Paper className={classes.root}>\r\n\t\t\t      <TableContainer className={classes.container}>\r\n\t\t\t        <Table stickyHeader aria-label=\"sticky table\">\r\n\t\t\t          <TableHead>\r\n\t\t\t            <TableRow>\r\n\t\t\t              {columns.map(column => (\r\n\t\t\t                <TableCell\r\n\t\t\t                  key={column.id}\r\n\t\t\t                  align=\"center\"\r\n\t\t\t                  style={{ minWidth: column.minWidth }}\r\n\t\t\t                >\r\n\t\t\t                  {column.label}\r\n\t\t\t                </TableCell>\r\n\t\t\t              ))}\r\n\t\t\t            </TableRow>\r\n\t\t\t          </TableHead>\r\n\t\t\t          <TableBody>\r\n\t\t\t            {moves.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row, i) => {\r\n\t\t\t              return (\r\n\t\t\t                <TableRow hover role=\"checkbox\" tabIndex={-1} key={i}>\r\n\t\t\t                  <TableCell align=\"center\">\r\n\t\t\t                  \t{row.move.name}\r\n\t\t\t                  </TableCell>\r\n\t\t\t                </TableRow>\r\n\t\t\t              );\r\n\t\t\t            })}\r\n\t\t\t          </TableBody>\r\n\t\t\t        </Table>\r\n\t\t\t      </TableContainer>\r\n\t\t\t      <TablePagination\r\n\t\t\t\t        rowsPerPageOptions={[10, 25, 100]}\r\n\t\t\t\t        component=\"div\"\r\n\t\t\t\t        count={moves.length}\r\n\t\t\t\t        rowsPerPage={rowsPerPage}\r\n\t\t\t\t        page={page}\r\n\t\t\t\t        onChangePage={handleChangePage}\r\n\t\t\t\t        onChangeRowsPerPage={handleChangeRowsPerPage}\r\n\t\t\t      />\r\n\t\t\t    </Paper>\r\n\t\t\t</Grid>\r\n\t\t</Grid>\r\n\t);\r\n}\r\n\r\nexport default PokemonPage;","import React from \"react\";\r\nimport { Tabs, Tab } from '@material-ui/core';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\n\r\nconst PokeBar = () => {\r\n\treturn(\r\n        <AppBar style={{ position: 'relative'}}>\r\n\t      <Toolbar>\r\n\t      \t<Tabs centered value={false}>\r\n\t      \t\t<Tab label=\"Gen I\" href=\"/Pokemon_App\" />\r\n\t      \t</Tabs>\r\n \t      </Toolbar>\r\n\t    </AppBar>\r\n  \t)\r\n}\r\n\r\nexport default PokeBar;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport CardList from \"./components/CardList/CardList\";\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport PokemonPage from './components/PokemonPage/PokemonPage';\r\nimport PokeBar from './components/PokeBar';\r\n\r\nclass App extends Component{\r\n\t\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tpokemon: [],\r\n\t\t};\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.fetchPokemon();\r\n\t}\r\n\r\n\tfetchPokemon() {\r\n\t\tfetch('https://pokeapi.co/api/v2/pokemon/?limit=151')\r\n\t\t.then(res => res.json())\r\n\t\t.then((allPokemon) => {\r\n\t\t\tallPokemon.results.forEach((poke) => {\r\n\t\t\t\tfetch(poke.url)\r\n\t\t\t\t.then(data => data.json())\r\n\t\t\t\t.then((pokeData) => {\r\n\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\tpokemon: this.state.pokemon.concat(pokeData)\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t})\r\n\t\t})\r\n\t}\r\n\r\n\tcreateRoute() {\r\n\t\treturn(\r\n\t\t\t<Router>\r\n\t\t\t\t{this.state.pokemon.map((poke, i) => \r\n\t\t\t\t\t<Route key={i} exact path={\"/Pokemon_App/\"+poke.name} component={() => \r\n\t\t\t\t\t\t<PokemonPage\r\n\t\t\t\t\t\t\tname={poke.name} \r\n\t\t\t\t\t\t\tsprite={poke.sprites.front_default}\r\n\t\t\t\t\t\t\tmoves={poke.moves}\r\n\t\t\t\t\t\t\tpokeTypes={poke.types}\r\n\t\t\t\t\t\t\tweight={poke.weight}\r\n\t\t\t\t\t\t\theight={poke.height}\r\n\t\t\t\t\t\t\tid={poke.id}\r\n\t\t\t\t\t\t\tbaseXP={poke.base_experience}\r\n\t\t\t\t\t\t\tkey={i+1}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t}/>\r\n\t\t\t\t)}\r\n\t\t\t</Router>\r\n\t\t);\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn(\r\n\t\t\t<div>\r\n\t\t\t\t<PokeBar/>\r\n\t\t\t\t<Router>\r\n\t\t\t\t\t{this.createRoute()}\r\n\t\t\t\t\t<Route exact path=\"/Pokemon_App\" component={() => <CardList pokemon={this.state.pokemon} />} />\r\n\t\t\t\t</Router>\t\t\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}